(function(){var e={566:function(){},206:function(){},72:function(){},978:function(){},135:function(){},355:function(){},523:function(){},25:function(){},89:function(){Shopware.Utils.GlobalFunctions={appLanguage:function(){return Shopware.Context.api.systemLanguageId},generateSlug:function(e){return e.toString().toLowerCase().trim().normalize("NFD").replace(/[\u0300-\u036f]/g,"").replace(/[^a-z0-9 ]/g,"").replace(/\s+/g,"-")},getActiveLangData:async function(e,t,i,n=!1){try{if(!e||!t)throw Error("Type and fkId are required.");let a=new Shopware.Data.Criteria;a.addFilter(Shopware.Data.Criteria.equals("type",e)),a.addFilter(Shopware.Data.Criteria.equals("fkId",t)),a.addFilter(Shopware.Data.Criteria.equals("languageId",i));let l=Shopware.Service("repositoryFactory").create("gisl_blog_translation"),s=await l.search(a,Shopware.Context.api);if(s&&s.length>0)return s[0];if(n)return this.getActiveLangData(e,t,this.appLanguage());return console.warn(`No active language data found for type: ${e} and fkId: ${t}`),null}catch(e){return console.error("Error fetching active language data:",e),null}},storeLanguageData:async function(e,t={}){try{let i;let{type:n,langId:a,title:l,slug:s,shortDescription:o,description:r,languageIdPk:g,meta_title:c,meta_description:d,meta_keywords:m}=t,u=Shopware.Service("repositoryFactory").create("gisl_blog_translation");if(g){if(!(i=await u.get(g,Shopware.Context.api)))return console.error("Translation not found with the provided ID:",g),!1}else i=u.create(Shopware.Context.api);return i.fkId=e,i.languageId=a||this.appLanguage(),i.type=n,i.title=l||"",i.slug=s||"",i.shortDescription=o||"",i.description=r||"",i.meta_title=c||"",i.meta_description=d||"",i.meta_keywords=m||"",i.updatedAt=new Date().toISOString(),await u.save(i,Shopware.Context.api),!0}catch(e){return console.error("An error occurred while saving language data:",e),!1}},validateUniqueSlug:async function(e,t){let i=new Shopware.Data.Criteria;i.addFilter(Shopware.Data.Criteria.equals("slug",e)),t&&i.addFilter(Shopware.Data.Criteria.not("AND",[Shopware.Data.Criteria.equals("id",t)]));let n=Shopware.Service("repositoryFactory").create("gisl_blog_translation");try{if((await n.search(i,Shopware.Context.api)).total>0)return{isValid:!1,error:"The slug you entered already exists"};return{isValid:!0,error:null}}catch(e){return console.error("Error validating unique slug:",e),{isValid:!1,error:"An error occurred while validating the slug"}}}}},336:function(e,t,i){var n=i(566);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals),i(346).Z("bf94db72",n,!0,{})},947:function(e,t,i){var n=i(206);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals),i(346).Z("faf3174a",n,!0,{})},219:function(e,t,i){var n=i(72);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals),i(346).Z("c9b48ad8",n,!0,{})},402:function(e,t,i){var n=i(978);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals),i(346).Z("12480035",n,!0,{})},701:function(e,t,i){var n=i(135);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals),i(346).Z("757d4bca",n,!0,{})},986:function(e,t,i){var n=i(355);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals),i(346).Z("13f0ae08",n,!0,{})},636:function(e,t,i){var n=i(523);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals),i(346).Z("0ed4a402",n,!0,{})},710:function(e,t,i){var n=i(25);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals),i(346).Z("6931da5e",n,!0,{})},346:function(e,t,i){"use strict";function n(e,t){for(var i=[],n={},a=0;a<t.length;a++){var l=t[a],s=l[0],o={id:e+":"+a,css:l[1],media:l[2],sourceMap:l[3]};n[s]?n[s].parts.push(o):i.push(n[s]={id:s,parts:[o]})}return i}i.d(t,{Z:function(){return p}});var a="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!a)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var l={},s=a&&(document.head||document.getElementsByTagName("head")[0]),o=null,r=0,g=!1,c=function(){},d=null,m="data-vue-ssr-id",u="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function p(e,t,i,a){g=i,d=a||{};var s=n(e,t);return h(s),function(t){for(var i=[],a=0;a<s.length;a++){var o=l[s[a].id];o.refs--,i.push(o)}t?h(s=n(e,t)):s=[];for(var a=0;a<i.length;a++){var o=i[a];if(0===o.refs){for(var r=0;r<o.parts.length;r++)o.parts[r]();delete l[o.id]}}}}function h(e){for(var t=0;t<e.length;t++){var i=e[t],n=l[i.id];if(n){n.refs++;for(var a=0;a<n.parts.length;a++)n.parts[a](i.parts[a]);for(;a<i.parts.length;a++)n.parts.push(b(i.parts[a]));n.parts.length>i.parts.length&&(n.parts.length=i.parts.length)}else{for(var s=[],a=0;a<i.parts.length;a++)s.push(b(i.parts[a]));l[i.id]={id:i.id,refs:1,parts:s}}}}function w(){var e=document.createElement("style");return e.type="text/css",s.appendChild(e),e}function b(e){var t,i,n=document.querySelector("style["+m+'~="'+e.id+'"]');if(n){if(g)return c;n.parentNode.removeChild(n)}if(u){var a=r++;t=y.bind(null,n=o||(o=w()),a,!1),i=y.bind(null,n,a,!0)}else t=v.bind(null,n=w()),i=function(){n.parentNode.removeChild(n)};return t(e),function(n){n?(n.css!==e.css||n.media!==e.media||n.sourceMap!==e.sourceMap)&&t(e=n):i()}}var f=function(){var e=[];return function(t,i){return e[t]=i,e.filter(Boolean).join("\n")}}();function y(e,t,i,n){var a=i?"":n.css;if(e.styleSheet)e.styleSheet.cssText=f(t,a);else{var l=document.createTextNode(a),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(l,s[t]):e.appendChild(l)}}function v(e,t){var i=t.css,n=t.media,a=t.sourceMap;if(n&&e.setAttribute("media",n),d.ssrId&&e.setAttribute(m,t.id),a&&(i+="\n/*# sourceURL="+a.sources[0]+" */\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}}},t={};function i(n){var a=t[n];if(void 0!==a)return a.exports;var l=t[n]={id:n,exports:{}};return e[n](l,l.exports,i),l.exports}i.d=function(e,t){for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="bundles/gislblog/",window?.__sw__?.assetPath&&(i.p=window.__sw__.assetPath+"/bundles/gislblog/"),function(){"use strict";i(89);let{Component:e}=Shopware;e.register("blog-aside",{template:'<ul>\n    <li v-for="option in options" :key="option.target">\n        <a \n            :class="option.name === activeRoute ? \'activeLink\' : \'link\'"\n            :href="\'#\' + option.target"\n        >\n            {{ option.name }}\n        </a>\n    </li>\n</ul>\n',data(){return{options:[{name:"Blog",target:"/blog/post/list"},{name:"Category",target:"/blog/category/list"},{name:"Author",target:"/blog/author/list"}]}},props:{activeRoute:{type:String,required:!0}}}),i(710);var t=JSON.parse('{"gisl":{"general":{"dailymotionLabel":"Dailymotion-Video","title":"Blog","titleLabel":"Titel","blogListing":"Blog Liste","description":"Blog hier verwalten","new":"Neu","save":"Speichern","update":"Aktualisieren","success":"Erfolg","error":"Fehler","common_error_message":"Es ist ein Fehler aufgetreten. Bitte versuchen Sie es sp\xe4ter noch einmal","common_delete_message":"Artikel erfolgreich gel\xf6scht!","paginationCount":"Anzahl der Paginierungen","sectionTitle":"Titel","allBlog":"Alle Blogs","buttonTitle":"Schaltfl\xe4chentitel","cms":{"blogTitle":"Blog Liste","blogListAlert":"Der Blogeintrag wird hier im Storefront gerendert","blogDetailsTitle":"Blogdetails","blogDetailsAlert":"Blogdetails wird hier im Storefront gerendert","blogCategoryTitle":"Blog-Kategorie","blogCategoryListAlert":"Die Auflistung der Blog-Kategorien wird hier in der Storefront gerendert","blogShortDescription":"Blog-Kurzbeschreibung","blogShortDescriptionAlert":"Die Blog-Kurzbeschreibung wird hier im Storefront gerendert","generalMessage":"Der Inhalt des Blogeintrags wird automatisch vom Element abgerufen.","emptyResult":"Kein Artikel gefunden"}},"blog":{"title":"Blog","description":"Blog","saveMessage":"Blog erfolgreich erstellt","updateMessage":"Blog erfolgreich aktualisiert","cms":{"blogList":"Blog Liste Element"}},"author":{"title":"Autorin","saveMessage":"Autor erfolgreich erstellt","updateMessage":"Autor erfolgreich aktualisiert"},"category":{"title":"Kategorie","description":"Blog Kategorie","saveMessage":"Kategorie erfolgreich erstellt","updateMessage":"Kategorie erfolgreich aktualisiert"}}}'),n=JSON.parse('{"gisl":{"general":{"dailymotionLabel":"Dailymotion Video","title":"Blog","titleLabel":"Title","blogListing":"Blog List","description":"Manage blog here","new":"New","save":"Save","update":"Update","success":"Success","error":"Error","common_error_message":"Something went wrong please try again later","common_delete_message":"Item deleted successfully!","paginationCount":"Pagination count","sectionTitle":"Title","allBlog":"All Blog","buttonTitle":"Button Title","cms":{"blogTitle":"Blog List","blogListAlert":"Blog listing will be rendered here in the storefront","blogDetailsTitle":"Blog Details","blogDetailsAlert":"Blog Details will be rendered here in the storefront","blogCategoryTitle":"Blog Category","blogCategoryListAlert":"Blog Category listing will be rendered here in the storefront","blogShortDescription":"Blog Short Description","blogShortDescriptionAlert":"Blog Short Description will be rendered here in the storefront","generalMessage":"The blog listing content will be automatically fetched by the element.","emptyResult":"No, item found"}},"blog":{"title":"Blog","description":"Blog author","saveMessage":"Blog created successfully","updateMessage":"Blog updated successfully","cms":{"blogList":"Blog Lists Element"}},"author":{"title":"Author","description":"Blog author","saveMessage":"Author created successfully","updateMessage":"Author updated successfully"},"category":{"title":"Category","description":"Blog category","saveMessage":"Category created successfully","updateMessage":"Category updated successfully"}}}');let{Component:a,Mixin:l}=Shopware,{Criteria:s}=Shopware.Data;a.register("blog-post-list",{template:'{% block blog_post_list %}\n\n<sw-page class="blog-post-list">\n\n    {% block blog_post_list_smart_bar_actions %}\n        <template #smart-bar-actions>\n            <languages  :languageId="languageId" @change="handleLanguageChange" />\n            <sw-button\n                variant="primary"\n                :routerLink="{ name: \'blog.post.create\' }"\n                > <sw-icon name="regular-plus-circle-s" /> {{ $tc(\'gisl.general.new\') }}\n            </sw-button>\n        </template>\n    {% endblock %}\n\n    <template #content>\n\n        <div class="item_row">\n\n            <div class="side_nav">\n                <blog-aside  activeRoute="Blog"/>\n            </div>\n\n            <div class="col-10">\n\n                <sw-data-grid\n                    :dataSource="items"\n                    :columns="columns"\n                    :showSelection="false"\n                    >\n                    <template #actions="{ item }">\n                        <sw-context-menu-item @click="onEditItem(item)">Edit</sw-context-menu-item>\n                        <sw-context-menu-item @click="postId = item.id; confirmModal = !confirmModal">Delete</sw-context-menu-item>\n                    </template>\n                </sw-data-grid>\n\n                 \n                <sw-pagination\n                    :currentPage="page"\n                    :total="total"\n                    :limit="limit"\n                    @page-change="onPageChange"\n                />\n            \n            </div>\n\n        </div>\n\n    </template>\n\n</sw-page>\n\n<sw-confirm-modal\n    v-if="confirmModal"\n    class="sw-my-component__confirm-delete-modal"\n    type="delete"\n    :text="\'Are you sure you want to delete this?\'"\n    @confirm="onDeleteItem()"\n    @close="confirmModal = !confirmModal"\n    @cancel="confirmModal = !confirmModal">\n</sw-confirm-modal>\n\n{% endblock %}',mixins:[l.getByName("notification")],snippets:{"de-DE":t,"en-GB":n},inject:["repositoryFactory"],data(){return{postId:null,items:[],total:0,limit:10,page:1,sortBy:"createdAt",sortDirection:"DESC",naturalSorting:!1,columns:[{property:"title",label:"Title",routerLink:"blog.post.create",width:"200px"},{property:"author",label:"Author",width:"100px"}],entity:"gisl_blog_post",confirmModal:!1,languageId:null}},methods:{async loadItems(){let e=new s(this.page,this.limit);e.addSorting(s.sort(this.sortBy,this.sortDirection,this.naturalSorting)),e.addAssociation("postAuthor"),this.repository=this.repositoryFactory.create(this.entity),this.repository.search(e,Shopware.Context.api).then(async e=>{if(e&&e.length>0)for(let t of(this.items=[],e)){let e=await Shopware.Utils.GlobalFunctions.getActiveLangData("blog",t.id,this.languageId,!0);this.items.push({id:t.id||null,title:e?.title||"",author:t?.postAuthor?.name||"",slug:e?.slug||"",meta_title:e?.meta_title||""})}})},onEditItem(e){let t=e.id;this.$router.push({name:"blog.post.create",params:{id:t}})},onPageChange(e){let{page:t,limit:i}=e;this.limit=i,this.page=t,this.loadItems()},async onDeleteItem(){let e=this.postId;if(!e){this.createNotificationError({title:this.$tc("gisl.general.error"),message:this.$tc("gisl.general.common_error_message")});return}try{let t=this.itemRepository,i=this.repositoryFactory.create("gisl_blog_translation");if(!t||!i){this.createNotificationError({title:this.$tc("gisl.general.error"),message:this.$tc("gisl.general.common_error_message")});return}let n=new Shopware.Data.Criteria;n.addFilter(Shopware.Data.Criteria.equals("fkId",e));let a=await i.search(n,Shopware.Context.api);a.total>0&&await Promise.all(a.map(e=>i.delete(e.id,Shopware.Context.api))),await t.delete(e,Shopware.Context.api),this.confirmModal=!1,this.createNotificationSuccess({title:this.$tc("gisl.general.success"),message:this.$tc("gisl.general.common_delete_message")}),this.loadItems()}catch(e){console.error("Error deleting item:",e),this.createNotificationError({title:this.$tc("gisl.general.error"),message:this.$tc("gisl.general.common_error_message")})}},handleLanguageChange(e){this.languageId=e,this.loadItems()}},created(){this.loadItems()},itemRepository(){return this.repositoryFactory.create(this.entity)},mounted(){this.languageId=Shopware.Utils.GlobalFunctions.appLanguage()}});let{Component:o}=Shopware;o.register("quill-editor",{template:'<div class="sw-field">\n    <label for="quill-editor">{{ name }}</label>\n    <div ref="quillContainer" class="quill-editor-container"></div>\n</div>\n',props:{name:{type:String,required:!0},value:{type:String,default:""}},data(){return{editor:null}},watch:{value(e){this.editor&&this.editor.root.innerHTML!==e&&(this.editor.root.innerHTML=e)}},mounted(){this.loadQuillResources().then(()=>{this.initializeEditor()})},methods:{loadQuillResources(){return Promise.all([new Promise((e,t)=>{let i=document.createElement("link");i.rel="stylesheet",i.href="https://cdn.quilljs.com/1.3.7/quill.snow.css",i.onload=e,i.onerror=t,document.head.appendChild(i)}),new Promise((e,t)=>{let i=document.createElement("script");i.src="https://cdn.quilljs.com/1.3.7/quill.min.js",i.onload=e,i.onerror=t,document.head.appendChild(i)})])},initializeEditor(){this.editor=new Quill(this.$refs.quillContainer,{theme:"snow",modules:{toolbar:[[{header:[1,2,3,4,5,6,!1]}],[{color:[]},{background:[]}],["bold","italic","underline","strike"],[{font:[]}],[{size:[]}],[{align:[]}],[{list:"ordered"},{list:"bullet"}],[{indent:"-1"},{indent:"+1"}],["blockquote"],["link","image","video"],["clean"]]}}),this.editor.root.innerHTML=this.value,this.editor.on("text-change",()=>{this.$emit("input",this.editor.root.innerHTML)})}}}),i(336);let{Component:r,Mixin:g,Context:c,Application:d}=Shopware,{Criteria:m}=Shopware.Data;r.register("blog-post-create",{template:'{% block blog_post_list %}\n\n<sw-page class="blog-post-create">\n\n    {% block blog_post_smart_bar_actions %}\n        <template #smart-bar-actions>\n            <span v-if="item.id">\n                <languages  :languageId="languageId" @change="handleLanguageChange" />\n            </span>\n            <sw-button \n                :disabled="true" \n                :square="false" \n                :block="false"  \n                variant="primary" \n                :isLoading="true" \n                v-if="loading"\n                >\n                Processing...\n            </sw-button>\n\n            <sw-button\n                v-else\n                variant="primary"\n                @click="onSave"\n                >\n                <span v-if="item.id"><sw-icon name="regular-layer-group" /> {{ $tc(\'gisl.general.update\') }} </span>\n                <span v-else><sw-icon name="regular-save" /> {{ $tc(\'gisl.general.save\') }} </span>\n            </sw-button>\n        </template>\n    {% endblock %}\n\n    <template #content> \n\n        <sw-card :title="cardTitle">\n\n            <sw-text-field\n                label="Title"\n                v-model:value="item.title"\n                :required="true" \n                :placeholder="\'Enter blog title...\'"\n                :error="errors.title"\n                >\n            </sw-text-field>\n            \n            <sw-text-field\n                label="Slug"\n                v-model:value="item.slug"\n                :required="true" \n                :error="errors.slug"\n                :placeholder="\'Enter slug...\'"\n                >\n            </sw-text-field>\n\n            <sw-multi-select\n                label="Select category"\n                :options="categoryList"\n                v-model:value="item.categories"\n                :allow-new="true"\n                :allow-new-items="true"\n                :label-property="\'name\'"\n                :value-property="\'id\'"\n                placeholder="Select category"\n                >\n            </sw-multi-select>   \n\n            <sw-select-field\n                label="Select an author"\n                placeholder="Choose an author..."\n                v-model:value="item.authorId"\n                :options="authors"\n                :searchable="true"\n                :allow-clear="true"\n                :label-property="\'name\'"\n                :value-property="\'id\'"\n                :required="true" \n                :error="errors.authorId"\n            >\n            </sw-select-field>\n\n            <sw-datepicker\n                v-model:value="item.publishedAt"\n                label="Publish Date"\n                placeholder="Select publish date and time"\n                dateType="datetime"\n                :timePicker="false"\n                :datePicker="true"\n                :allowInput="true"\n                :clearable="true"\n                :required="true"\n                :error="errors.publishedAt"\n            />\n\n            <sw-textarea-field \n                v-model:value="item.shortDescription" \n                label="Short Description"\n                validation="required"\n                :required="true"\n                :error="errors.short_description"\n            />\n\n            <quill-editor name="Description" v-model="item.description" @input="updateDescription"></quill-editor>\n\n            <div class="inputLabel">\n                <h6>Tags</h6>\n                <sw-button\n                    variant="primary"\n                    title="New tag"\n                    @click="newTag"\n                    >\n                    <sw-icon name="regular-plus-circle-s" />\n                </sw-button>\n            </div>\n\n            <sw-multi-select\n                :options="tags"\n                v-model:value="item.tags"\n                :allow-new="true"\n                :allow-new-items="true"\n                :label-property="\'name\'"\n                :value-property="\'id\'"\n                placeholder="Select tags"\n                >\n            </sw-multi-select>\n            \n            <sw-media-field\n                v-model:value="item.mediaId"\n                label="Select or upload an image"\n                :media-upload-tag="\'blog-post-media\'"\n                :allow-multi-select="false"\n                type="button"\n            />\n            \n            <sw-switch-field v-model:value="item.active" label="Active"></sw-switch-field>\n\n            <h5> Meta Info </h5>\n            \n            <sw-text-field\n                label="Meta Title"\n                v-model:value="item.meta_title"\n                :placeholder="\'Enter meta title...\'"\n            >\n            </sw-text-field>\n\n            <sw-textarea-field\n                label="Meta Description"\n                v-model:value="item.meta_description"\n                :placeholder="\'Enter meta descriiption...\'"\n                >\n            </sw-textarea-field>\n\n            <sw-textarea-field\n                label="Meta keywords"\n                v-model:value="item.meta_keywords"\n                :placeholder="\'Enter meta keywords\'"\n            >\n            </sw-textarea-field>\n\n\n        </sw-card>\n\n    </template>\n        \n</sw-page>\n\n{% endblock %}',mixins:[g.getByName("notification"),g.getByName("placeholder")],snippets:{"de-DE":t,"en-GB":n},inject:["repositoryFactory","acl"],data(){return{item:{id:null,title:"",slug:"",shortDescription:"",description:"",publishedAt:"",active:!0,mediaId:null,authorId:null,categories:[],meta_title:"",meta_description:"",meta_keywords:"",tags:[]},errors:{title:null,slug:null,short_description:null,categories:null,authorId:null,publishedAt:null},languageId:null,languageIdPk:null,loading:!1,createdId:null,entity:"gisl_blog_post",authors:[],categoryList:[],tags:[],showMediaModal:!1}},methods:{async loadItem(){try{let e=this.item?.id;if(!e){console.warn("Item ID is not available.");return}let t=this.itemRepository;if(!t)throw Error("Item repository is not available.");let i=new m;i.setIds([e]);let n=await t.search(i,Shopware.Context.api);if(n&&n.length>0){let e=n[0];this.item={...this.item,...e}}else{console.warn("Item not found with ID:",e);return}let a=await Shopware.Utils.GlobalFunctions.getActiveLangData("blog",e,this.languageId,!1);null!=a?(this.item={...this.item,title:a.title||"",slug:a.slug||"",description:a.description||"",shortDescription:a.shortDescription||"",meta_title:a.meta_title||"",meta_description:a.meta_description||"",meta_keywords:a.meta_keywords||""},this.languageIdPk=a.id||null):(this.item={...this.item,title:"",slug:"",description:"",shortDescription:"",meta_title:"",meta_description:"",meta_keywords:""},this.languageIdPk=null),console.log(this.item)}catch(e){this.createNotificationError({title:this.$tc("gisl.general.error"),message:this.$tc("gisl.general.common_error_message")})}},async onSave(){if(!await this.validateRequiredFields()){this.loading=!1;return}this.loading=!0;let{error:e}=await Shopware.Utils.GlobalFunctions.validateUniqueSlug(this.item.slug,this.languageIdPk);if(this.loading=!1,null!=e){console.log("Error msg",e),this.createNotificationError({title:"Duplicate Slug",message:e});return}await this.updateItem()},async updateItem(){let e=this.itemRepository,t=!!this.item.id,i=t?await e.get(this.item.id):e.create(),n={":":"[CLONE]",",":"[COMMA]",";":"[SEMICLONE]"};this.item.description=this.item.description.replace(/<iframe/g,"[iframe]").replace(/<\/iframe>/g,"[/iframe]"),i.active=this.item.active,i.publishedAt=this.item.publishedAt,i.mediaId=this.item.mediaId,i.authorId=this.item.authorId,i.tags=this.item.tags,i.categories=this.item.categories,this.item.tags?i.tags_name=this.tags.filter(e=>this.item.tags.includes(e.id)).map(e=>e.name):i.tags_name=[];try{await e.save(i,Shopware.Context.api);let a=(await e.get(i.id,Shopware.Context.api)).id,l=this.item.description.replace(/src="([^"]*)"/g,(e,t)=>{let i=t.replace(/[:,;]/g,e=>n[e]);return`src="${i}"`}),s={type:"blog",languageIdPk:this.languageIdPk,langId:this.languageId,title:this.item.title,shortDescription:this.item.shortDescription,description:l,slug:this.item.slug,meta_title:this.item.meta_title,meta_description:this.item.meta_description,meta_keywords:this.item.meta_keywords};await Shopware.Utils.GlobalFunctions.storeLanguageData(a,s),this.createNotificationSuccess({title:this.$tc("gisl.general.success"),message:t?this.$tc("gisl.blog.updateMessage"):this.$tc("gisl.blog.saveMessage")}),this.$router.push({name:"blog.post.list"})}catch(e){this.createNotificationError({title:this.$tc("gisl.general.error"),message:this.$tc("gisl.general.common_error_message")})}finally{this.loading=!1}},checkIfId(){let e=this.$route.params.id;e&&(this.item.id=e,this.loadItem())},getAllAuthors(){let e=new m(1,500);return this.repositoryFactory.create("gisl_blog_author").search(e,Shopware.Context.api).then(e=>{this.authors=e}).catch(e=>{})},getAllTags(){let e=new m(1,500);return this.repositoryFactory.create("tag").search(e,Shopware.Context.api).then(e=>{this.tags=e}).catch(e=>{})},newTag(){this.$router.push({name:"sw.settings.tag.index"})},async getAllCategories(){let e=new m(1,500);this.repositoryFactory.create("gisl_blog_category").search(e,Shopware.Context.api).then(async e=>{if(e&&e.length>0)for(let t of(this.categoryList=[],e)){let e=await Shopware.Utils.GlobalFunctions.getActiveLangData("category",t.id,this.languageId,!0);this.categoryList.push({id:t.id||null,name:e?.title||""})}})},async validateRequiredFields(){let e=!0;return this.item.title?this.errors.title=null:(this.errors.title="Title is required",e=!1),this.item.slug?this.errors.slug=null:(this.errors.slug="Slug is required",e=!1),this.item.shortDescription?this.errors.short_description=null:(this.errors.short_description="Short description is required",e=!1),this.item.authorId?this.errors.slug=null:(this.errors.authorId="Author is required",e=!1),this.item.publishedAt?this.errors.publishedAt=null:(this.errors.publishedAt="Published date is required",e=!1),e},async validateUniqueSlug(){let e=new Shopware.Data.Criteria;e.addFilter(Shopware.Data.Criteria.equals("slug",this.item.slug)),this.item.id&&e.addFilter(Shopware.Data.Criteria.not("AND",[Shopware.Data.Criteria.equals("id",this.item.id)]));let t=this.itemRepository,i=await t.search(e,Shopware.Context.api);return i.total>0?this.errors.slug="The slug you entered already exists":this.errors.slug=null,this.loading=!1,0===i.total},updateDescription(e){this.item.description=e},handleLanguageChange(e){this.languageId=e,this.loadItem()}},watch:{"item.title":function(e,t){t&&e!==t&&(this.item.slug=Shopware.Utils.GlobalFunctions.generateSlug(this.item.title))}},computed:{itemRepository(){return this.repositoryFactory.create(this.entity)},cardTitle(){return this.item.id?`${this.$tc("gisl.general.update")} ${this.$tc("gisl.blog.title")}`:`${this.$tc("gisl.general.save")} ${this.$tc("gisl.blog.title")}`}},mounted(){this.languageId=Shopware.Utils.GlobalFunctions.appLanguage(),this.checkIfId(),this.getAllAuthors(),this.getAllCategories(),this.getAllTags()}});let{Module:u}=Shopware;u.register("blog-post",{type:"plugin",name:"blog-post",title:"gisl.blog.title",description:"gisl.blog.description",color:"#ff3d58",icon:"regular-content",entity:"gisl_blog_post",routes:{list:{component:"blog-post-list",path:"list"},create:{component:"blog-post-create",path:"create/:id?",meta:{parentPath:"blog.post.list"}}},navigation:[{id:"blog-post-list",label:"gisl.general.title",color:"#ff3d58",path:"blog.post.list",parent:"sw-content",position:100}]});let{Component:p,Mixin:h}=Shopware,{Criteria:w}=Shopware.Data;p.register("blog-author-list",{template:'{% block blog_author_list %}\n\n<sw-page class="blog-author-list">\n\n    {% block blog_author_list_smart_bar_actions %}\n        <template #smart-bar-actions>\n            <sw-button\n                variant="primary"\n                :routerLink="{ name: \'blog.author.create\' }"\n                ><sw-icon name="regular-plus-circle-s" /> {{ $tc(\'gisl.general.new\') }}\n            </sw-button>\n        </template>\n    {% endblock %}\n\n    <template #content>\n        <div class="item_row">\n            <div class="side_nav">\n                <blog-aside  activeRoute="Author"/>\n            </div>\n            <div class="col-10">\n\n                <sw-data-grid\n                    :dataSource="items"\n                    :columns="columns"\n                    :showSelection="false"\n                    >\n\n                    <template #actions="{ item }">\n                        <sw-context-menu-item @click="onEditItem(item)">Edit</sw-context-menu-item>\n                        <sw-context-menu-item @click="itemId = item.id; confirmModal = !confirmModal">Delete</sw-context-menu-item>\n                    </template>\n                </sw-data-grid>\n                \n                <sw-pagination\n                    :currentPage="page"\n                    :total="total"\n                    :limit="limit"\n                    @page-change="onPageChange"\n                />\n\n            </div>\n        </div>\n    </template>\n        \n</sw-page>\n\n<sw-confirm-modal\n    v-if="confirmModal"\n    class="sw-my-component__confirm-delete-modal"\n    type="delete"\n    :text="\'Are you sure you want to delete this?\'"\n    @confirm="onDeleteItem()"\n    @close="confirmModal = !confirmModal"\n    @cancel="confirmModal = !confirmModal">\n</sw-confirm-modal>\n\n{% endblock %}',mixins:[h.getByName("notification")],inject:["repositoryFactory"],data(){return{items:[],total:0,limit:10,page:1,sortBy:"createdAt",sortDirection:"DESC",naturalSorting:!1,columns:[{property:"name",label:"Title",routerLink:"blog.author.create"},{property:"description",label:"Description"}],entity:"gisl_blog_author",itemId:null,confirmModal:!1}},methods:{loadItems(){let e=new w(this.page,this.limit);e.addSorting(w.sort(this.sortBy,this.sortDirection,this.naturalSorting)),this.repository=this.repositoryFactory.create(this.entity),this.repository.search(e).then(e=>{this.items=e,this.total=e.total})},onEditItem(e){let t=e.id;this.$router.push({name:"blog.author.create",params:{id:t}})},onPageChange(e){let{page:t,limit:i}=e;this.limit=i,this.page=t,this.loadItems()},async onDeleteItem(){let e=this.itemId;if(!e){console.error("Item ID is undefined or null.");return}try{let t=this.repositoryFactory.create(this.entity);await t.delete(e,Shopware.Context.api),this.confirmModal=!1,this.createNotificationSuccess({title:this.$tc("gisl.general.success"),message:this.$tc("gisl.general.common_delete_message")}),this.loadItems()}catch(e){this.createNotificationError({title:this.$tc("gisl.general.error"),message:this.$tc("gisl.general.common_error_message")})}}},created(){this.loadItems()},itemRepository(){return this.repositoryFactory.create(this.entity)}});let{Component:b,Mixin:f}=Shopware,{Criteria:y}=Shopware.Data;b.register("blog-author-create",{template:'{% block blog_author_list %}\n\n<sw-page class="blog-author-create">\n\n    {% block blog_author_list_smart_bar_actions %}\n        <template #smart-bar-actions>\n            <sw-button \n                :disabled="true" \n                :square="false" \n                :block="false"  \n                variant="primary" \n                :isLoading="true" \n                v-if="loading"\n                >\n                Processing...\n            </sw-button>\n\n            <sw-button\n                v-else\n                variant="primary"\n                @click="onSave"\n                >\n                <span v-if="item.id"><sw-icon name="regular-layer-group" /> {{ $tc(\'gisl.general.update\') }} </span>\n                <span v-else><sw-icon name="regular-save" /> {{ $tc(\'gisl.general.save\') }} </span>\n            </sw-button>\n        </template>\n    {% endblock %}\n\n    <template #content> \n\n        <sw-card :title="cardTitle">\n            \n            <sw-text-field \n                v-model:value="item.name" \n                :required="true" \n                :error="errors.name"\n                label="Name" \n            />\n            \n            <sw-textarea-field \n                v-model:value="item.description" \n                label="Description"\n            />\n            \n            <sw-media-field\n                label="Select Media"\n                v-model:value="item.mediaId"\n                :allowMultiSelect="false"\n            />\n\n            <sw-switch-field v-model:value="item.active" label="Active"></sw-switch-field>\n\n        </sw-card>\n\n    </template>\n        \n</sw-page>\n\n{% endblock %}',mixins:[f.getByName("notification"),f.getByName("placeholder")],inject:["repositoryFactory","acl"],data(){return{item:{id:null,name:"",description:"",active:!0,mediaId:null},errors:{name:null},toastTitle:"",toastMessage:"",repository:"gisl_blog_author",loading:!1}},methods:{async loadItem(){let e=this.item.id,t=new y;t.setIds([e]),this.itemRepository.search(t).then(e=>{this.item=e[0]})},async onSave(){if(this.loading=!0,!await this.validateRequiredFields()){this.loading=!1;return}await this.updateItem()},async updateItem(){let e=this.itemRepository,t=!!this.item.id,i=t?await e.get(this.item.id):e.create();i.name=this.item.name,i.description=this.item.description,i.active=this.item.active,i.mediaId=this.item.mediaId;try{await e.save(i,Shopware.Context.api),this.createNotificationSuccess({title:this.$tc("gisl.general.success"),message:t?this.$tc("gisl.author.updateMessage"):this.$tc("gisl.author.saveMessage")}),this.$router.push({name:"blog.author.list"})}catch(e){this.createNotificationError({title:this.$tc("gisl.general.error"),message:this.$tc("gisl.general.common_error_message")})}finally{this.loading=!1}},async validateRequiredFields(){let e=!0;return this.item.name?this.errors.name=null:(this.errors.name="Name is required",e=!1),e},checkIfId(){let e=this.$route.params.id;e&&(this.item.id=e,this.loadItem())}},computed:{itemRepository(){return this.repositoryFactory.create(this.repository)},cardTitle(){return this.item.id?`${this.$tc("gisl.general.update")} ${this.$tc("gisl.author.title")}`:`${this.$tc("gisl.general.save")} ${this.$tc("gisl.author.title")}`}},mounted(){this.checkIfId()}}),Shopware.Module.register("blog-author",{type:"plugin",name:"blog-author",title:"gisl.author.title",description:"blog-author.general.description",color:"#ff3d58",icon:"regular-content",entity:"gisl_blog_author",snippets:{"de-DE":t,"en-GB":n},routes:{list:{component:"blog-author-list",path:"list"},create:{component:"blog-author-create",path:"create/:id?",meta:{parentPath:"blog.author.list"}}}});let{Component:v}=Shopware;v.register("languages",{template:'<select @change="handleLanguageChange($event)" id="language-select" v-model="languageId" :disabled="isDisable">\n    <option v-for="language in languageOptions" :value="language.id" :key="language.id" >{{ language.name }}</option>\n</select>\n',props:{languageId:{type:String,required:!0},isDisable:{type:Boolean,default:!1}},data(){return{selectedLanguage:null,languageOptions:[],isLoading:!1}},created(){this.loadLanguages()},methods:{async loadLanguages(){this.isLoading=!0;let e=Shopware.Service("repositoryFactory").create("language"),t=new Shopware.Data.Criteria;try{(await e.search(t,Shopware.Context.api)).map(e=>{this.languageOptions.push({id:e.id,name:e.name})})}catch(e){this.createNotificationError({title:"Error",message:"Could not load languages."})}finally{this.isLoading=!1}},handleLanguageChange(e){let t=e.target.value;this.$emit("change",t)}}});let{Component:_,Mixin:S}=Shopware,{Criteria:C}=Shopware.Data;_.register("blog-category-list",{template:'{% block blog_category_list %}\n\n<sw-page class="blog-category-list">\n\n    {% block blog_author_list_smart_bar_actions %}\n        <template #smart-bar-actions>\n            <languages  :languageId="languageId" @change="handleLanguageChange" />\n            <sw-button\n                variant="primary"\n                :routerLink="{ name: \'blog.category.create\' }">\n                <sw-icon name="regular-plus-circle-s" /> {{ $tc(\'gisl.general.new\') }}\n            </sw-button>\n        </template>\n    {% endblock %}\n\n    <template #content>\n\n        <div class="item_row">\n\n            <div class="side_nav">\n                <blog-aside  activeRoute="Category"/>\n            </div>\n            <div class="col-10">\n                <sw-data-grid\n                    :dataSource="items"\n                    :columns="columns"\n                    :showSelection="false"\n                    >\n\n                    <template #actions="{ item }">\n                        <sw-context-menu-item @click="onEditItem(item)">Edit</sw-context-menu-item>\n                        <sw-context-menu-item @click="categoryId = item.id; confirmModal = !confirmModal">Delete</sw-context-menu-item>\n                    </template>\n                </sw-data-grid>\n                \n                <sw-pagination\n                    :currentPage="page"\n                    :total="total"\n                    :limit="limit"\n                    @page-change="onPageChange"\n                />\n            </div>\n        </div>\n    </template>\n        \n</sw-page>\n<sw-confirm-modal\n    v-if="confirmModal"\n    class="sw-my-component__confirm-delete-modal"\n    type="delete"\n    :text="\'Are you sure you want to delete this?\'"\n    @confirm="onDeleteItem()"\n    @close="confirmModal = !confirmModal"\n    @cancel="confirmModal = !confirmModal">\n</sw-confirm-modal>\n{% endblock %}',mixins:[S.getByName("notification")],inject:["repositoryFactory"],data(){return{items:[],total:0,limit:10,page:1,sortBy:"createdAt",sortDirection:"DESC",naturalSorting:!1,columns:[{property:"name",label:"Title",routerLink:"blog.category.create"},{property:"slug",label:"Slug"},{property:"meta_title",label:"Meta Title"}],languageId:null,entity:"gisl_blog_category",categoryId:null,confirmModal:!1}},methods:{loadItems(){let e=new C(this.page,this.limit);e.addSorting(C.sort(this.sortBy,this.sortDirection,this.naturalSorting)),e.addAssociation("media"),this.repository=this.repositoryFactory.create(this.entity),this.repository.search(e,Shopware.Context.api).then(async e=>{if(e&&e.length>0)for(let t of(this.items=[],e)){let e=await Shopware.Utils.GlobalFunctions.getActiveLangData("category",t.id,this.languageId,!0);this.items.push({id:t.id||null,name:e?.title||"",slug:e?.slug||"",meta_title:e?.meta_title||""})}this.total=e.total||0})},onEditItem(e){let t=e.id;this.$router.push({name:"blog.category.create",params:{id:t}})},onPageChange(e){let{page:t,limit:i}=e;this.limit=i,this.page=t,this.loadItems()},async onDeleteItem(){let e=this.categoryId;if(!e){this.createNotificationError({title:this.$tc("gisl.general.error"),message:this.$tc("gisl.general.common_error_message")});return}try{let t=this.itemRepository,i=this.repositoryFactory.create("gisl_blog_translation");if(!t||!i){this.createNotificationError({title:this.$tc("gisl.general.error"),message:this.$tc("gisl.general.common_error_message")});return}let n=new Shopware.Data.Criteria;for(let t of(n.addFilter(Shopware.Data.Criteria.equals("fkId",e)),await i.search(n,Shopware.Context.api)))await i.delete(t.id,Shopware.Context.api);await t.delete(e,Shopware.Context.api),this.confirmModal=!1,this.createNotificationSuccess({title:this.$tc("gisl.general.success"),message:this.$tc("gisl.general.common_delete_message")}),this.loadItems()}catch(e){this.createNotificationError({title:this.$tc("gisl.general.error"),message:this.$tc("gisl.general.common_error_message")})}},handleLanguageChange(e){this.languageId=e,this.loadItems()}},created(){this.loadItems()},computed:{itemRepository(){return this.repositoryFactory.create(this.entity)}},mounted(){this.languageId=Shopware.Utils.GlobalFunctions.appLanguage()}});let{Component:I,Mixin:k}=Shopware,{Criteria:x}=Shopware.Data;I.register("blog-category-create",{template:'{% block blog_category_list %}\n\n<sw-page class="blog-category-create">\n\n    {% block blog_category_list_smart_bar_actions %}\n        <template #smart-bar-actions>\n            <languages  :languageId="languageId" @change="handleLanguageChange" :isDisable="!item.id" />\n            <sw-button \n                :disabled="true" \n                :square="false" \n                :block="false"  \n                variant="primary" \n                :isLoading="true" \n                v-if="loading"\n                >\n                Processing...\n            </sw-button>\n\n            <sw-button\n                v-else\n                variant="primary"\n                @click="onSave"\n                >\n                <span v-if="item.id"><sw-icon name="regular-layer-group" /> {{ $tc(\'gisl.general.update\') }} </span>\n                <span v-else><sw-icon name="regular-save" /> {{ $tc(\'gisl.general.save\') }} </span>\n            </sw-button>\n        </template>\n    {% endblock %}\n\n    <template #content> \n\n        <sw-card :title="cardTitle">\n\n            <sw-text-field \n                v-model:value="item.name" \n                :required="true" \n                :error="errors.name"\n                label="Name"\n            />\n            <sw-text-field \n                v-model:value="item.slug" \n                :required="true" \n                :error="errors.slug"\n                label="Slug" \n            />\n            \n            <sw-textarea-field \n                v-model:value="item.shortDescription" \n                label="Short Description"\n                :required="true"\n                :error="errors.short_description"\n            />\n\n            <sw-textarea-field \n                v-model:value="item.description" \n                label="Description"\n            />\n            \n            <sw-media-field\n                label="Select Media"\n                v-model:value="item.mediaId"\n                :allowMultiSelect="false"\n            />\n\n            <sw-switch-field v-model:value="item.active" label="Active"></sw-switch-field>\n\n            <sw-text-field \n                v-model:value="item.meta_title"\n                :error="errors.meta_title"\n                label="Meta Title" \n            />\n\n            <sw-textarea-field \n                v-model:value="item.meta_description" \n                label="Meta Description"\n            />\n\n            <sw-textarea-field \n                v-model:value="item.meta_keywords" \n                label="Meta Keywords"\n            />\n\n\n        </sw-card>\n\n    </template>\n        \n</sw-page>\n\n{% endblock %}',mixins:[k.getByName("notification"),k.getByName("placeholder")],inject:["repositoryFactory","acl"],data(){return{item:{id:null,name:"",slug:"",description:"",shortDescription:"",active:!0,mediaId:null,meta_title:"",meta_description:"",meta_keywords:""},errors:{name:null,slug:null,short_description:null},languageId:null,languageIdPk:null,toastTitle:"",toastMessage:"",repository:"gisl_blog_category",loading:!1}},methods:{async loadItem(){try{let e=this.item?.id;if(!e){console.warn("Item ID is not available.");return}let t=this.itemRepository;if(!t)throw Error("Item repository is not available.");let i=new x;i.setIds([e]);let n=await t.search(i,Shopware.Context.api);if(n&&n.length>0){let e=n[0];this.item={...this.item,id:e.id,active:e.active,mediaId:e.mediaId}}else{console.warn("Item not found with ID:",e);return}let a=await Shopware.Utils.GlobalFunctions.getActiveLangData("category",e,this.languageId,!1);null!=a?(this.item={...this.item,name:a.title||"",slug:a.slug||"",description:a.description||"",shortDescription:a.shortDescription||"",meta_title:a.meta_title||"",meta_description:a.meta_description||"",meta_keywords:a.meta_keywords||""},this.languageIdPk=a.id||null):(this.item={...this.item,name:"",slug:"",description:"",shortDescription:"",meta_title:"",meta_description:"",meta_keywords:""},this.languageIdPk=null)}catch(e){this.createNotificationError({title:this.$tc("gisl.general.error"),message:this.$tc("gisl.general.common_error_message")})}},async onSave(){if(!await this.validateRequiredFields()){this.loading=!1;return}this.loading=!0;let{error:e}=await Shopware.Utils.GlobalFunctions.validateUniqueSlug(this.item.slug,this.languageIdPk);if(this.loading=!1,null!=e){console.log("Error msg",e),this.createNotificationError({title:"Duplicate Slug",message:e});return}await this.updateItem()},async updateItem(){let e=this.itemRepository,t=!!this.item.id,i=t?await e.get(this.item.id):e.create();i.active=this.item.active,i.mediaId=this.item.mediaId;try{await e.save(i,Shopware.Context.api);let n=(await e.get(i.id,Shopware.Context.api)).id,a={type:"category",languageIdPk:this.languageIdPk,langId:this.languageId,title:this.item.name,shortDescription:this.item.shortDescription,description:this.item.description,slug:this.item.slug,meta_title:this.item.meta_title,meta_description:this.item.meta_description,meta_keywords:this.item.meta_keywords};await Shopware.Utils.GlobalFunctions.storeLanguageData(n,a),this.createNotificationSuccess({title:this.$tc("gisl.general.success"),message:t?this.$tc("gisl.category.updateMessage"):this.$tc("gisl.category.saveMessage")}),this.$router.push({name:"blog.category.list"})}catch(e){this.createNotificationError({title:this.$tc("gisl.general.error"),message:this.$tc("gisl.general.common_error_message")})}finally{this.loading=!1}},async validateRequiredFields(){let e=!0;return this.item.name?this.errors.name=null:(this.errors.name="Name is required",e=!1),this.item.slug?this.errors.slug=null:(this.errors.slug="Slug is required",e=!1),this.item.shortDescription?this.errors.short_description=null:(this.errors.short_description="Short description is required",e=!1),e},appLanguage(){let e=Shopware.Context.api.systemLanguageId;this.languageId=e},handleLanguageChange(e){this.languageId=e,this.loadItem()}},watch:{"item.name":function(e,t){t&&e!==t&&(this.item.slug=Shopware.Utils.GlobalFunctions.generateSlug(this.item.name))}},computed:{itemRepository(){return this.repositoryFactory.create(this.repository)},cardTitle(){return this.item.id?`${this.$tc("gisl.general.update")} ${this.$tc("gisl.category.title")}`:`${this.$tc("gisl.general.save")} ${this.$tc("gisl.category.title")}`}},created(){},mounted(){this.languageId=Shopware.Utils.GlobalFunctions.appLanguage();let e=this.$route.params.id;e&&(this.item.id=e,this.loadItem())}}),Shopware.Module.register("blog-category",{type:"plugin",name:"blog-category",title:"gisl.category.title",description:"gisl.category.description",color:"#ff3d58",icon:"regular-content",entity:"gisl_blog_category",snippets:{"de-DE":t,"en-GB":n},routes:{list:{component:"blog-category-list",path:"list"},create:{component:"blog-category-create",path:"create/:id?",meta:{parentPath:"blog.category.list"}}}}),i(402),Shopware.Component.register("sw-cms-block-gisl-blog-listing",{template:'{% block gisl_cms_gisl_blog_listing %}\n    <div class="sw-cms-block-blog-listing">\n        <slot name="content"></slot>\n    </div>\n{% endblock %}'}),i(701),Shopware.Component.register("sw-cms-preview-gisl-blog-listing",{template:"<div class=\"sw-cms-preview-blog-listing\">\n    {{$tc('gisl.general.cms.blogListAlert')}}\n</div>"}),Shopware.Service("cmsService").registerCmsBlock({name:"gisl-blog-listing",label:"gisl.general.cms.blogTitle",category:"text",component:"sw-cms-block-gisl-blog-listing",previewComponent:"sw-cms-preview-gisl-blog-listing",defaultConfig:{marginBottom:"20px",marginTop:"20px",marginLeft:"20px",marginRight:"20px",sizingMode:"boxed"},slots:{content:{type:"gisl-blog-listing"}}}),i(636),Shopware.Component.register("sw-cms-el-gisl-blog-listing",{template:"<div class=\"sw-cms-el-blog-listing\">\n    <h2>{{ $tc('gisl.general.cms.blogTitle') }}</h2>\n    <sw-alert variant=\"info\">\n        {{ $tc('gisl.general.cms.blogListAlert') }}\n    </sw-alert>\n</div>"});let{Component:D,Mixin:$}=Shopware;D.register("sw-cms-el-config-gisl-blog-listing",{template:'{% block gisl_cms_element_blog_listing_config %}\n<div class="sw-cms-el-config-blog">\n\n    {% block gisl_cms_element_blog_listing_config_paginationCount_field %}\n        <sw-number-field\n            numberType="int"\n            :step="1"\n            :min="1"\n            :max="null"\n            v-model:value="element.config.paginationCount.value"\n            :digits="2"\n            :allowEmpty="false"\n            :label="$tc(\'gisl.general.paginationCount\')">\n        </sw-number-field>\n    {% endblock %}\n\n</div>\n{% endblock %}',inject:["repositoryFactory"],mixins:[$.getByName("cms-element")],created(){this.createdComponent()},methods:{async createdComponent(){this.initElementConfig("gisl-blog-listing")}}}),Shopware.Service("cmsService").registerCmsElement({name:"gisl-blog-listing",label:"Blog Listing Element",component:"sw-cms-el-gisl-blog-listing",configComponent:"sw-cms-el-config-gisl-blog-listing",defaultConfig:{paginationCount:{source:"static",value:5}}}),Shopware.Component.register("sw-cms-block-gisl-blog-category",{template:'<template>\n    <div class="sw-cms-block-gisl-blog-listing">\n        <slot name="content"></slot>\n    </div>\n</template>'}),Shopware.Component.register("sw-cms-preview-gisl-blog-category",{template:"<div class=\"sw-cms-preview-blog-listing\">\n    {{ $tc('gisl.general.cms.blogCategoryListAlert')}}\n</div>"}),Shopware.Service("cmsService").registerCmsBlock({name:"gisl-blog-category",label:"gisl.general.cms.blogCategoryTitle",category:"text",component:"sw-cms-block-gisl-blog-category",previewComponent:"sw-cms-preview-gisl-blog-category",defaultConfig:{marginBottom:"20px",marginTop:"20px",marginLeft:"20px",marginRight:"20px",sizingMode:"boxed"},slots:{content:{type:"gisl-blog-category"}}}),Shopware.Component.register("sw-cms-el-gisl-blog-category",{template:"<div class=\"sw-cms-el-blog-listing\">\n    <h2>{{ $tc('gisl.general.cms.blogCategoryTitle') }}</h2>\n    <sw-alert variant=\"info\">\n        {{ $tc('gisl.general.cms.blogCategoryListAlert') }}\n    </sw-alert>\n</div>"});let{Component:M,Mixin:L}=Shopware;Shopware.Component.register("sw-cms-el-config-gisl-blog-category",{template:'{% block gisl_cms_element_blog_listing_config %}\n<div class="sw-cms-el-config-blog">\n\n    {% block gisl_cms_element_blog_listing_config_section_title_field %}\n        <sw-text-field\n            v-model:value="element.config.sectionTitle.value"\n            :digits="2"\n            :allowEmpty="false"\n            :label="$tc(\'gisl.general.sectionTitle\')">\n        </sw-text-field>\n    {% endblock %}\n\n</div>\n{% endblock %}',inject:["repositoryFactory"],mixins:[L.getByName("cms-element")],created(){this.createdComponent()},methods:{async createdComponent(){this.initElementConfig("gisl-blog-category")}}}),Shopware.Service("cmsService").registerCmsElement({name:"gisl-blog-category",label:"Blog Listing Element",component:"sw-cms-el-gisl-blog-category",configComponent:"sw-cms-el-config-gisl-blog-category",defaultConfig:{sectionTitle:{source:"static",value:"Category"}}}),Shopware.Component.register("sw-cms-block-gisl-blog-short-description",{template:'<template>\n    <div class="sw-cms-block-gisl-blog-listing">\n        <slot name="content"></slot>\n    </div>\n</template>'}),Shopware.Component.register("sw-cms-preview-gisl-blog-short-description",{template:"<div class=\"sw-cms-preview-blog-listing\">\n    {{ $tc('gisl.general.cms.blogShortDescriptionAlert')}}\n</div>"}),Shopware.Service("cmsService").registerCmsBlock({name:"gisl-blog-short-description",label:"gisl.general.cms.blogShortDescription",category:"text",component:"sw-cms-block-gisl-blog-short-description",previewComponent:"sw-cms-preview-gisl-blog-short-description",defaultConfig:{marginBottom:"20px",marginTop:"20px",marginLeft:"20px",marginRight:"20px",sizingMode:"boxed"},slots:{content:{type:"gisl-blog-short-description"}}}),Shopware.Component.register("sw-cms-el-gisl-blog-short-description",{template:"<div class=\"sw-cms-el-blog-listing\">\n    <h2>{{ $tc('gisl.general.cms.blogShortDescription') }}</h2>\n    <sw-alert variant=\"info\">\n        {{ $tc('gisl.general.cms.blogShortDescriptionAlert') }}\n    </sw-alert>\n</div>"});let{Component:B,Mixin:A}=Shopware;B.register("sw-cms-el-config-gisl-blog-short-description",{template:'{% block gisl_cms_element_blog_short_description_config %}\n<div class="sw-cms-el-config-blog">\n\n    {% block gisl_cms_element_blog_short_description_config_section_title_field %}\n        <sw-text-field\n            v-model:value="element.config.title.value"\n            :label="$tc(\'gisl.general.titleLabel\')">\n        </sw-text-field>\n        <sw-text-field\n            v-model:value="element.config.buttonName.value"\n            :label="$tc(\'gisl.general.buttonTitle\')">\n        </sw-text-field>\n    {% endblock %}\n</div>\n{% endblock %}',inject:["repositoryFactory"],mixins:[A.getByName("cms-element")],created(){this.createdComponent()},methods:{async createdComponent(){this.initElementConfig("gisl-blog-short-description")}}}),Shopware.Service("cmsService").registerCmsElement({name:"gisl-blog-short-description",label:"Blog Listing Element",component:"sw-cms-el-gisl-blog-short-description",configComponent:"sw-cms-el-config-gisl-blog-short-description",defaultConfig:{title:{source:"static",value:"Blog"},buttonName:{source:"static",value:"Read More"}}}),i(947),Shopware.Component.register("w-cms-block-gisl-blog-details",{template:'{% block gisl_cms_gisl_blog_details %}\n    <div class="sw-cms-block-blog-details">\n        <slot name="content"></slot>\n    </div>\n{% endblock %}'}),i(219),Shopware.Component.register("sw-cms-preview-gisl-blog-details",{template:"<div class=\"sw-cms-preview-blog-listing\">\n    {{$tc('gisl.general.cms.blogListAlert')}}\n</div>"}),Shopware.Service("cmsService").registerCmsBlock({name:"gisl-blog-details",label:"gisl.general.cms.blogDetailsTitle",category:"text",component:"sw-cms-block-gisl-blog-details",previewComponent:"sw-cms-preview-gisl-blog-details",defaultConfig:{marginBottom:"20px",marginTop:"20px",marginLeft:"20px",marginRight:"20px",sizingMode:"boxed"},slots:{content:{type:"gisl-blog-details"}}}),i(986),Shopware.Component.register("sw-cms-el-gisl-blog-details",{template:"<div class=\"sw-cms-el-blog-listing\">\n    <h2>{{ $tc('gisl.general.cms.blogDetailsTitle') }}</h2>\n    <sw-alert variant=\"info\">\n        {{ $tc('gisl.general.cms.blogDetailsAlert') }}\n    </sw-alert>\n</div>"});let{Component:E,Mixin:T}=Shopware;E.register("sw-cms-el-config-gisl-blog-details",{template:'{% block gisl_cms_element_blog_listing_config %}\n<div class="sw-cms-el-config-blog">\n\n    {% block gisl_cms_element_blog_listing_config_paginationCount_field %}\n        <sw-number-field\n            numberType="int"\n            :step="1"\n            :min="1"\n            :max="null"\n            v-model:value="element.config.paginationCount.value"\n            :digits="2"\n            :allowEmpty="false"\n            :label="$tc(\'gisl.general.paginationCount\')">\n        </sw-number-field>\n    {% endblock %}\n\n</div>\n{% endblock %}',inject:["repositoryFactory"],mixins:[T.getByName("cms-element")],created(){this.createdComponent()},methods:{async createdComponent(){this.initElementConfig("gisl-blog-details")}}}),Shopware.Service("cmsService").registerCmsElement({name:"gisl-blog-details",label:"Blog Details Element",component:"sw-cms-el-gisl-blog-details",configComponent:"sw-cms-el-config-gisl-blog-details",defaultConfig:{paginationCount:{source:"static",value:5}}})}()})();